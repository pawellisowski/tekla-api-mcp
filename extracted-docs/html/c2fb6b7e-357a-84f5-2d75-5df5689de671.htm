<html><head><meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ShapeItem.InsertOrGetGuidsOfShapesWithMatchingGeometry Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="InsertOrGetGuidsOfShapesWithMatchingGeometry method" /><meta name="System.Keywords" content="ShapeItem.InsertOrGetGuidsOfShapesWithMatchingGeometry method" /><meta name="Microsoft.Help.F1" content="Tekla.Structures.Catalogs.ShapeItem.InsertOrGetGuidsOfShapesWithMatchingGeometry" /><meta name="Microsoft.Help.Id" content="M:Tekla.Structures.Catalogs.ShapeItem.InsertOrGetGuidsOfShapesWithMatchingGeometry(System.Collections.Generic.List{System.String}@)" /><meta name="Description" content="Inserts a shape to the shape catalog based on the shape geometry (does not allow duplicate geometry). If, based on fingerprint, the geometry already exists it populates a list of Guids of shapes using that same geometry." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Tekla.Structures.Catalogs" /><meta name="file" content="c2fb6b7e-357a-84f5-2d75-5df5689de671" /><meta name="guid" content="c2fb6b7e-357a-84f5-2d75-5df5689de671" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Tekla Open API Reference for Tekla Structures 2025</div><div class="pageBody"><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/logo.png" /></td><td class="titleColumn"><h1>ShapeItem<span id="LST1C29D025_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1C29D025_0?cpp=::|nu=.");</script>InsertOrGetGuidsOfShapesWithMatchingGeometry Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
             Inserts a shape to the shape catalog based on the shape geometry (does not allow duplicate geometry).
             If, based on fingerprint, the geometry already exists it populates a list of Guids of shapes using that same geometry.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="cb701b36-e4be-454f-359a-34adaedd239d.htm">Tekla.Structures.Catalogs</a><br />
    <strong>Assembly:</strong>
   Tekla.Structures.Catalogs (in Tekla.Structures.Catalogs.dll) Version: 2025.0.0-alpha00048669+a99462f17964bc42624ada6e8d316db2d795d226<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">InsertOrGetGuidsOfShapesWithMatchingGeometry</span>(
	<span class="keyword">out</span> <span class="identifier">List</span>&lt;<span class="identifier">string</span>&gt; <span class="parameter">existingShapeGuids</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">InsertOrGetGuidsOfShapesWithMatchingGeometry</span> ( 
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">existingShapeGuids</span> <span class="keyword">As</span> <span class="identifier">List</span>(<span class="keyword">Of</span> <span class="identifier">String</span>)
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">existingShapeGuids</span></dt><dd>Type: <span class="nolink">System.Collections.Generic<span id="LST1C29D025_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1C29D025_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>List</span><span id="LST1C29D025_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1C29D025_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="nolink">String</span><span id="LST1C29D025_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1C29D025_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST1C29D025_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1C29D025_4?cpp=%");</script><br />A list of guids of any shapes with matching geometry fingerprints.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <span class="nolink">Boolean</span><br />
             Returns true on success; false if not successful.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><span class="nolink">InvalidOperationException</span></td><td>Thrown if Insert failed due to an internal reason.</td></tr><tr><td><span class="nolink">ArgumentException</span></td><td>Thrown if the shape data is invalid (see message for more specific cause).</td></tr><tr><td><span class="nolink">ArgumentOutOfRangeException</span></td><td>Thrown if an implementation error occurred.</td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Tekla.Structures.Catalogs;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Example
{
    <span class="highlight-keyword">var</span> vertices = <span class="highlight-keyword">new</span>[]
    {
        <span class="highlight-keyword">new</span> Vector(  <span class="highlight-number">0.0</span>,   <span class="highlight-number">0.0</span>,   <span class="highlight-number">0.0</span>), <span class="highlight-comment">// 0</span>
        <span class="highlight-keyword">new</span> Vector(<span class="highlight-number">300.0</span>,   <span class="highlight-number">0.0</span>,   <span class="highlight-number">0.0</span>), <span class="highlight-comment">// 1</span>
        <span class="highlight-keyword">new</span> Vector(<span class="highlight-number">300.0</span>, <span class="highlight-number">300.0</span>,   <span class="highlight-number">0.0</span>), <span class="highlight-comment">// 2</span>
        <span class="highlight-keyword">new</span> Vector(  <span class="highlight-number">0.0</span>, <span class="highlight-number">300.0</span>,   <span class="highlight-number">0.0</span>), <span class="highlight-comment">// 3</span>
        <span class="highlight-keyword">new</span> Vector(  <span class="highlight-number">0.0</span>,   <span class="highlight-number">0.0</span>, <span class="highlight-number">300.0</span>), <span class="highlight-comment">// 4</span>
        <span class="highlight-keyword">new</span> Vector(<span class="highlight-number">300.0</span>,   <span class="highlight-number">0.0</span>, <span class="highlight-number">300.0</span>), <span class="highlight-comment">// 5</span>
        <span class="highlight-keyword">new</span> Vector(<span class="highlight-number">300.0</span>, <span class="highlight-number">300.0</span>, <span class="highlight-number">300.0</span>), <span class="highlight-comment">// 6</span>
        <span class="highlight-keyword">new</span> Vector(  <span class="highlight-number">0.0</span>, <span class="highlight-number">300.0</span>, <span class="highlight-number">300.0</span>), <span class="highlight-comment">// 7</span>
    };
    <span class="highlight-keyword">var</span> outloop = <span class="highlight-keyword">new</span>[] { <span class="highlight-keyword">new</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">3</span>, <span class="highlight-number">2</span>, <span class="highlight-number">1</span> },
                  <span class="highlight-keyword">new</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">5</span>, <span class="highlight-number">4</span> },
                  <span class="highlight-keyword">new</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">6</span>, <span class="highlight-number">5</span> },
                  <span class="highlight-keyword">new</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">3</span>, <span class="highlight-number">7</span>, <span class="highlight-number">6</span> },
                  <span class="highlight-keyword">new</span>[] { <span class="highlight-number">3</span>, <span class="highlight-number">0</span>, <span class="highlight-number">4</span>, <span class="highlight-number">7</span> },
                  <span class="highlight-keyword">new</span>[] { <span class="highlight-number">4</span>, <span class="highlight-number">5</span>, <span class="highlight-number">6</span>, <span class="highlight-number">7</span> }};

    <span class="highlight-keyword">var</span> innerLoop = <span class="highlight-keyword">new</span> Dictionary{<span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>[][]}
    {
    };

    <span class="highlight-keyword">var</span> brep = <span class="highlight-keyword">new</span> FacetedBrep(vertices, outloop, innerLoop);
    <span class="highlight-keyword">var</span> shapeItem1 = <span class="highlight-keyword">new</span> ShapeItem
    {
         Name = <span class="highlight-literal">"MyNiceCubeBrep1"</span>,
         ShapeFacetedBrep = brep,
         UpAxis = ShapeUpAxis.Z_Axis
    };

    <span class="highlight-keyword">var</span> result = shapeItem1.Insert();
    System.Diagnostics.Debug.Assert(result, $<span class="highlight-literal">"Failed to insert {shapeItem1.Name}."</span>);

    <span class="highlight-keyword">var</span> shapeItem2 = <span class="highlight-keyword">new</span> ShapeItem
    {
         Name = <span class="highlight-literal">"MyNiceCubeBrep2"</span>,
         ShapeFacetedBrep = brep,
         UpAxis = ShapeUpAxis.Z_Axis
    };

    List{<span class="highlight-keyword">string</span>} existingGuids;
    result = shapeItem2.InsertOrGetGuidsOfShapesWithMatchingGeometry(<span class="highlight-keyword">out</span> existingGuids);
    System.Diagnostics.Debug.Assert(!result, $<span class="highlight-literal">"Should have failed to insert {shapeItem2.Name}."</span>);
    System.Diagnostics.Debug.Assert(
        existingGuids.Contains(shapeItem1.Guid),
        $<span class="highlight-literal">"{nameof(existingGuids)} should have conatined{shapeItem1.Guid}."</span>);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="3b2b9bdd-99b2-1ed9-3e1f-6a79989bfbd8.htm">ShapeItem Class</a></div><div class="seeAlsoStyle"><a href="cb701b36-e4be-454f-359a-34adaedd239d.htm">Tekla.Structures.Catalogs Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright © 1992-2025 Trimble Solutions Corporation and its licensors. All rights reserved.</p> </div></body></html>