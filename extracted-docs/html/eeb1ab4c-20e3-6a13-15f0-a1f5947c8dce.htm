<html><head><meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>MatrixFactory.FromCoordinateSystem Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="FromCoordinateSystem method" /><meta name="System.Keywords" content="MatrixFactory.FromCoordinateSystem method" /><meta name="Microsoft.Help.F1" content="Tekla.Structures.Geometry3d.MatrixFactory.FromCoordinateSystem" /><meta name="Microsoft.Help.Id" content="M:Tekla.Structures.Geometry3d.MatrixFactory.FromCoordinateSystem(Tekla.Structures.Geometry3d.CoordinateSystem)" /><meta name="Description" content="Returns a coordinate transformation matrix defined by the given coordinate system. With the returned matrix points can be transformed from the given coordinate system to the current work plane coordinate system." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Tekla.Structures.Geometry3d" /><meta name="file" content="eeb1ab4c-20e3-6a13-15f0-a1f5947c8dce" /><meta name="guid" content="eeb1ab4c-20e3-6a13-15f0-a1f5947c8dce" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Help1.css" /></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Tekla Open API Reference for Tekla Structures 2025</div><div class="pageBody"><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/logo.png" /></td><td class="titleColumn"><h1>MatrixFactory<span id="LST7D43E7BE_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7D43E7BE_0?cpp=::|nu=.");</script>FromCoordinateSystem Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
             Returns a coordinate transformation matrix defined by the given coordinate system.
             With the returned matrix points can be transformed from the given coordinate system to
             the current work plane coordinate system.
             </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="e84e8a9d-9721-ca44-1764-fb8035c9778a.htm">Tekla.Structures.Geometry3d</a><br />
    <strong>Assembly:</strong>
   Tekla.Structures (in Tekla.Structures.dll) Version: 2025.0.0-alpha00048669+a99462f17964bc42624ada6e8d316db2d795d226<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Matrix</span> <span class="identifier">FromCoordinateSystem</span>(
	<span class="identifier">CoordinateSystem</span> <span class="parameter">CoordSys</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">FromCoordinateSystem</span> ( 
	<span class="parameter">CoordSys</span> <span class="keyword">As</span> <span class="identifier">CoordinateSystem</span>
) <span class="keyword">As</span> <span class="identifier">Matrix</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">CoordSys</span></dt><dd>Type: <a href="62ca8a5c-4cfe-1fe0-5009-75b994b06a07.htm">Tekla.Structures.Geometry3d<span id="LST7D43E7BE_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7D43E7BE_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CoordinateSystem</a><br />The coordinate system to transform points from.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="ec2ec811-7205-62fe-315b-c5935a5e20b8.htm">Matrix</a><br />The transformation matrix defined by the given coordinate system.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection">This example shows the extremes of the beam in the current work plane coordinate system.
             <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Globalization;
<span class="highlight-keyword">using</span> Tekla.Structures.Geometry3d;
<span class="highlight-keyword">using</span> Tekla.Structures.Model;
<span class="highlight-keyword">using</span> Tekla.Structures.Model.UI;

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Example
{
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Model _Model = <span class="highlight-keyword">new</span> Model();
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> GraphicsDrawer GraphicsDrawer = <span class="highlight-keyword">new</span> GraphicsDrawer();
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">static</span> Color TextColor = <span class="highlight-keyword">new</span> Color(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);

       <span class="highlight-comment">//Shows the beam's extremes in the current work plane coordinates</span>
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ShowExtremesInCurrentCoordinates(Beam Beam)
       {
           <span class="highlight-comment">//Set the transformation plane to be in another location than global</span>
           <span class="highlight-comment">//Comment these lines out if you have done that already</span>
           TransformationPlane CurrentTP = _Model.GetWorkPlaneHandler().GetCurrentTransformationPlane();
           _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(<span class="highlight-keyword">new</span> TransformationPlane(Beam.GetCoordinateSystem()));

           <span class="highlight-comment">//Update the beam's extremes to the new transformation plane</span>
           Beam.Select();
           Point LocalStartPoint = Beam.StartPoint;
           Point LocalEndPoint = Beam.EndPoint;

           _Model.GetWorkPlaneHandler().SetCurrentTransformationPlane(CurrentTP);

           <span class="highlight-comment">//Get the matrix to transform the coordinates from local to current</span>
           Matrix TransformationMatrix = MatrixFactory.FromCoordinateSystem(Beam.GetCoordinateSystem());

           <span class="highlight-comment">//Transform the points from local to the current work plane coordinate system</span>
           Point CurrentStartPoint = TransformationMatrix.Transform(LocalStartPoint);
           Point CurrentEndPoint = TransformationMatrix.Transform(LocalEndPoint);

           <span class="highlight-comment">//Display results</span>
           DrawCoordinateSystem(<span class="highlight-keyword">new</span> CoordinateSystem());
           GraphicsDrawer.DrawText(CurrentStartPoint, FormatPointCoordinates(CurrentStartPoint), TextColor);
           GraphicsDrawer.DrawText(CurrentEndPoint, FormatPointCoordinates(CurrentEndPoint), TextColor);
       }

       <span class="highlight-comment">//Draws the coordinate system in which the values are shown</span>
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawCoordinateSystem(CoordinateSystem CoordinateSystem)
       {
           DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisX, <span class="highlight-literal">"X"</span>);
           DrawVector(CoordinateSystem.Origin, CoordinateSystem.AxisY, <span class="highlight-literal">"Y"</span>);
       }

       <span class="highlight-comment">//Draws the vector of the coordinate system</span>
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DrawVector(Point StartPoint, Vector Vector, <span class="highlight-keyword">string</span> Text)
       {
           Color Color = <span class="highlight-keyword">new</span> Color(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>);
           <span class="highlight-keyword">const</span> <span class="highlight-keyword">double</span> Radians = <span class="highlight-number">0.43</span>;

           Vector = Vector.GetNormal();
           Vector Arrow01 = <span class="highlight-keyword">new</span> Vector(Vector);

           Vector.Normalize(<span class="highlight-number">500</span>);
           Point EndPoint = <span class="highlight-keyword">new</span> Point(StartPoint);
           EndPoint.Translate(Vector.X, Vector.Y, Vector.Z);
           GraphicsDrawer.DrawLineSegment(StartPoint, EndPoint, Color);

           GraphicsDrawer.DrawText(EndPoint, Text, Color);

           Arrow01.Normalize(<span class="highlight-number">-100</span>);
           Vector Arrow = ArrowVector(Arrow01, Radians);

           Point ArrowExtreme = <span class="highlight-keyword">new</span> Point(EndPoint);
           ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
           GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);

           Arrow = ArrowVector(Arrow01, -Radians);

           ArrowExtreme = <span class="highlight-keyword">new</span> Point(EndPoint);
           ArrowExtreme.Translate(Arrow.X, Arrow.Y, Arrow.Z);
           GraphicsDrawer.DrawLineSegment(EndPoint, ArrowExtreme, Color);
       }

       <span class="highlight-comment">//Draws the arrows of the vectors</span>
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Vector ArrowVector(Vector Vector, <span class="highlight-keyword">double</span> Radians)
       {
           <span class="highlight-keyword">double</span> X, Y, Z;

           <span class="highlight-keyword">if</span>(Vector.X == <span class="highlight-number">0</span> &amp;&amp; Vector.Y == <span class="highlight-number">0</span>)
           {
               X = Vector.X;
               Y = (Vector.Y * Math.Cos(Radians)) - (Vector.Z * Math.Sin(Radians));
               Z = (Vector.Y * Math.Sin(Radians)) + (Vector.Z * Math.Cos(Radians));
           }
           <span class="highlight-keyword">else</span>
           {
               X = (Vector.X * Math.Cos(Radians)) - (Vector.Y * Math.Sin(Radians));
               Y = (Vector.X * Math.Sin(Radians)) + (Vector.Y * Math.Cos(Radians));
               Z = Vector.Z;
           }

           <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> Vector(X, Y, Z);
       }

       <span class="highlight-comment">//Shows the point coordinates with only two decimals</span>
       <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> FormatPointCoordinates(Point Point)
       {
           <span class="highlight-keyword">string</span> Output = String.Empty;

           Output = <span class="highlight-literal">"("</span> + Point.X.ToString(<span class="highlight-literal">"0.00"</span>, CultureInfo.InvariantCulture) + <span class="highlight-literal">", "</span> +
                    Point.Y.ToString(<span class="highlight-literal">"0.00"</span>, CultureInfo.InvariantCulture) + <span class="highlight-literal">", "</span> +
                    Point.Z.ToString(<span class="highlight-literal">"0.00"</span>, CultureInfo.InvariantCulture) + <span class="highlight-literal">")"</span>;

           <span class="highlight-keyword">return</span> Output;
       }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="ef97ef94-ca37-e418-1974-02453a5183fe.htm">MatrixFactory Class</a></div><div class="seeAlsoStyle"><a href="e84e8a9d-9721-ca44-1764-fb8035c9778a.htm">Tekla.Structures.Geometry3d Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p>Copyright © 1992-2025 Trimble Solutions Corporation and its licensors. All rights reserved.</p> </div></body></html>